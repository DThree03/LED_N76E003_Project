C51 COMPILER V9.60.0.0   QUEUE                                                             12/04/2022 22:22:14 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE QUEUE
OBJECT MODULE PLACED IN .\Output\Queue.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Library\StdDriver\src\Queue.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.
                    -.\Library\DeviceDriver;..\Library\StdDriver\inc) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\Queue.lst) OBJECT(.\
                    -Output\Queue.obj)

line level    source

   1          /*
   2           * Queue.c
   3           *
   4           *  Created on: Oct 29, 2021
   5           *  Author: DThree
   6           */
   7          /****************************************************************************/
   8          /***        Include files                                                 ***/
   9          /****************************************************************************/
  10          
  11          #include "Queue.h"
  12          
  13          
  14          /****************************************************************************/
  15          /***        Macro Definitions                                             ***/
  16          /****************************************************************************/
  17          
  18          /****************************************************************************/
  19          /***        Type Definitions                                              ***/
  20          /****************************************************************************/
  21          
  22          /****************************************************************************/
  23          /***        Local Function Prototypes                                     ***/
  24          /****************************************************************************/
  25          
  26          /****************************************************************************/
  27          /***        Exported Variables                                            ***/
  28          /****************************************************************************/
  29          
  30          /****************************************************************************/
  31          /***        Local Variables                                               ***/
  32          /****************************************************************************/
  33          
  34          /****************************************************************************/
  35          /***        Exported Functions                                            ***/
  36          /****************************************************************************/
  37          /****************************************************************************
  38           *
  39           * NAME:       vQueue_Init
  40           *
  41           * DESCRIPTION:
  42           *
  43           * PARAMETERS: Name     RW  Usage
  44           *
  45           * RETURNS:
  46           * void
  47           *
  48           ****************************************************************************/
  49          void vQueue_Init(tsQueue *psQueue, unsigned char *pau8Buffer, unsigned long u32Length)
  50          {
  51   1      
  52   1              /* Initialise the event queue */
  53   1              psQueue->u32ReadPtr = 0;
C51 COMPILER V9.60.0.0   QUEUE                                                             12/04/2022 22:22:14 PAGE 2   

  54   1              psQueue->u32WritePtr = 0;
  55   1              psQueue->u32Length = u32Length;
  56   1              psQueue->pau8Buffer = pau8Buffer;
  57   1      
  58   1      }
  59          
  60          /****************************************************************************
  61           *
  62           * NAME:       vQueue_Flush
  63           *
  64           * DESCRIPTION:
  65           *
  66           * PARAMETERS: Name     RW  Usage
  67           *
  68           * RETURNS:
  69           * void
  70           *
  71           ****************************************************************************/
  72          void vQueue_Flush(tsQueue *psQueue)
  73          {
  74   1      
  75   1              /* Initialise the event queue */
  76   1              psQueue->u32ReadPtr = 0;
  77   1              psQueue->u32WritePtr = 0;
  78   1      
  79   1      }
  80          
  81          /****************************************************************************
  82           *
  83           * NAME:       bPPP_QueueWrite
  84           *
  85           * DESCRIPTION:
  86           *
  87           * PARAMETERS: Name     RW  Usage
  88           *
  89           * RETURNS:
  90           * void
  91           *
  92           ****************************************************************************/
  93          bit bQueue_Write(tsQueue *psQueue, unsigned char u8Item)
  94          {
  95   1      
  96   1              /* Make a copy of the write pointer */
  97   1              unsigned long u32NewWritePtr = psQueue->u32WritePtr;
  98   1      
  99   1              u32NewWritePtr++;
 100   1              if(u32NewWritePtr == psQueue->u32Length)
 101   1              {
 102   2                      u32NewWritePtr = 0;
 103   2              }
 104   1      
 105   1              /* If new incremented pointer is same as read pointer, queue is full */
 106   1              if(u32NewWritePtr == psQueue->u32ReadPtr)
 107   1              {
 108   2                      return(0);
 109   2              }
 110   1      
 111   1              psQueue->pau8Buffer[psQueue->u32WritePtr] = u8Item;     /* Add item to queue */
 112   1              psQueue->u32WritePtr = u32NewWritePtr;                          /* Write new pointer */
 113   1      
 114   1              return(1);
 115   1      }
C51 COMPILER V9.60.0.0   QUEUE                                                             12/04/2022 22:22:14 PAGE 3   

 116          
 117          /****************************************************************************
 118           *
 119           * NAME:       bPPP_QueueRead
 120           *
 121           * DESCRIPTION:
 122           *
 123           * PARAMETERS: Name     RW  Usage
 124           *
 125           * RETURNS:
 126           * void
 127           *
 128           ****************************************************************************/
 129          bit bQueue_Read(tsQueue *psQueue, unsigned char *pu8Item)
 130          {
 131   1      
 132   1              /* If pointers are same, nothing in the queue */
 133   1              if(psQueue->u32ReadPtr == psQueue->u32WritePtr)
 134   1              {
 135   2                      return(0);
 136   2              }
 137   1      
 138   1              /* Read an event from the queue */
 139   1              *pu8Item = psQueue->pau8Buffer[psQueue->u32ReadPtr++];
 140   1      
 141   1              if(psQueue->u32ReadPtr == psQueue->u32Length)
 142   1              {
 143   2                      psQueue->u32ReadPtr = 0;
 144   2              }
 145   1      
 146   1              return(1);
 147   1      
 148   1      }
 149          
 150          /****************************************************************************
 151           *
 152           * NAME:       bQueue_IsEmpty
 153           *
 154           * DESCRIPTION:
 155           *
 156           * PARAMETERS: Name     RW  Usage
 157           *
 158           * RETURNS:
 159           * bit: TRUE if the queue is empty
 160           *                      FALSE if it contains data
 161           *
 162           ****************************************************************************/
 163          bit bQueue_IsEmpty(tsQueue *psQueue)
 164          {
 165   1      
 166   1              /* If pointers are same, nothing in the queue */
 167   1              if(psQueue->u32ReadPtr == psQueue->u32WritePtr)
 168   1              {
 169   2                      return(1);
 170   2              }
 171   1              else
 172   1              {
 173   2                      return(0);
 174   2              }
 175   1      
 176   1      }
 177          
C51 COMPILER V9.60.0.0   QUEUE                                                             12/04/2022 22:22:14 PAGE 4   

 178          
 179          /****************************************************************************
 180           *
 181           * NAME:       bQueue_IsFull
 182           *
 183           * DESCRIPTION:
 184           *      Checks if the queue is full or not
 185           *
 186           * PARAMETERS:  Name                    RW  Usage
 187           *
 188           * RETURNS:
 189           * bit: TRUE if the queue is full
 190           *                      FALSE if it contains data
 191           *
 192           ****************************************************************************/
 193          bit bQueue_IsFull(tsQueue *psQueue)
 194          {
 195   1      
 196   1              /* Queue can only ever hold u32Length -1 bytes max */
 197   1              if(u32Queue_GetDepth(psQueue) == psQueue->u32Length - 1)
 198   1              {
 199   2                      return(1);
 200   2              }
 201   1              else
 202   1              {
 203   2                      return(0);
 204   2              }
 205   1      
 206   1      }
 207          
 208          
 209          /****************************************************************************
 210           *
 211           * NAME:       u32Queue_GetDepth
 212           *
 213           * DESCRIPTION:
 214           *      Returns the number of bytes in the queue
 215           *
 216           * PARAMETERS:  Name                    RW  Usage
 217           *
 218           * RETURNS:
 219           *      unsigned long:          Number of bytes in the queue
 220           *
 221           ****************************************************************************/
 222          unsigned long u32Queue_GetDepth(tsQueue *psQueue)
 223          {
 224   1      
 225   1              /* If pointers are same, nothing in the queue */
 226   1              if(psQueue->u32ReadPtr == psQueue->u32WritePtr)
 227   1              {
 228   2                      return(0);
 229   2              }
 230   1      
 231   1      
 232   1              if(psQueue->u32WritePtr > psQueue->u32ReadPtr)
 233   1              {
 234   2                      return(psQueue->u32WritePtr - psQueue->u32ReadPtr);
 235   2              }
 236   1              else
 237   1              {
 238   2                      return(psQueue->u32Length - (psQueue->u32ReadPtr - psQueue->u32WritePtr));
 239   2              }
C51 COMPILER V9.60.0.0   QUEUE                                                             12/04/2022 22:22:14 PAGE 5   

 240   1      
 241   1      }
 242          
 243          
 244          /****************************************************************************/
 245          /***        Local Functions                                               ***/
 246          /****************************************************************************/
 247          /****************************************************************************/
 248          /***        END OF FILE                                                   ***/
 249          /****************************************************************************/
 250          
 251          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    760    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      30
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
